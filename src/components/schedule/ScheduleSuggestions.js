import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { format, parseISO } from "date-fns";
import { CalendarClock, Check, Star, User } from "lucide-react";
export default function ScheduleSuggestions({ suggestions, onSelect, onRefresh }) {
    if (suggestions.length === 0) {
        return (_jsxs(Card, { children: [_jsxs(CardHeader, { children: [_jsx(CardTitle, { className: "text-lg", children: "No Scheduling Suggestions Available" }), _jsx(CardDescription, { children: "We couldn't find any suitable scheduling suggestions based on staff availability." })] }), _jsx(CardFooter, { children: onRefresh && (_jsx(Button, { variant: "outline", onClick: onRefresh, children: "Try Different Parameters" })) })] }));
    }
    return (_jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsx("h3", { className: "text-lg font-medium", children: "Recommended Schedules" }), onRefresh && (_jsx(Button, { variant: "outline", size: "sm", onClick: onRefresh, children: "Refresh" }))] }), _jsx("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: suggestions.map((suggestion, index) => (_jsxs(Card, { className: index === 0 ? "border-2 border-primary" : "", children: [index === 0 && (_jsx("div", { className: "absolute top-0 right-0 transform translate-x-1/4 -translate-y-1/2", children: _jsxs(Badge, { className: "bg-primary text-white", children: [_jsx(Star, { className: "h-3 w-3 mr-1" }), " Best Match"] }) })), _jsxs(CardHeader, { className: "pb-2", children: [_jsxs(CardTitle, { className: "text-base flex items-center", children: [_jsx(User, { className: "h-4 w-4 mr-2" }), suggestion.staffName] }), _jsxs(CardDescription, { className: "flex items-center", children: [_jsx(CalendarClock, { className: "h-4 w-4 mr-2" }), format(parseISO(suggestion.date), "EEEE, MMMM d")] })] }), _jsxs(CardContent, { className: "pb-2", children: [_jsxs("div", { className: "grid grid-cols-2 gap-2 text-sm", children: [_jsxs("div", { children: [_jsx("div", { className: "text-muted-foreground", children: "Start Time" }), _jsx("div", { className: "font-medium", children: formatTimeDisplay(suggestion.startTime) })] }), _jsxs("div", { children: [_jsx("div", { className: "text-muted-foreground", children: "End Time" }), _jsx("div", { className: "font-medium", children: formatTimeDisplay(suggestion.endTime) })] })] }), _jsxs("div", { className: "mt-3 grid grid-cols-2 gap-2", children: [_jsxs("div", { className: "text-xs", children: [_jsx("div", { className: "text-muted-foreground", children: "Skill Match" }), _jsxs("div", { className: "flex items-center", children: [_jsx("div", { className: "h-2 w-full bg-gray-200 rounded-full", children: _jsx("div", { className: "h-2 bg-blue-600 rounded-full", style: { width: `${suggestion.relevanceScore}%` } }) }), _jsxs("span", { className: "ml-2 font-medium", children: [Math.round(suggestion.relevanceScore), "%"] })] })] }), _jsxs("div", { className: "text-xs", children: [_jsx("div", { className: "text-muted-foreground", children: "Time Utilization" }), _jsxs("div", { className: "flex items-center", children: [_jsx("div", { className: "h-2 w-full bg-gray-200 rounded-full", children: _jsx("div", { className: "h-2 bg-green-600 rounded-full", style: { width: `${suggestion.utilizationScore}%` } }) }), _jsxs("span", { className: "ml-2 font-medium", children: [Math.round(suggestion.utilizationScore), "%"] })] })] })] })] }), _jsx(CardFooter, { children: _jsxs(Button, { variant: index === 0 ? "default" : "outline", className: "w-full", onClick: () => onSelect(suggestion), children: [_jsx(Check, { className: "h-4 w-4 mr-2" }), index === 0 ? "Apply Best Match" : "Select This Schedule"] }) })] }, index))) })] }));
}
function formatTimeDisplay(time) {
    const [hours, minutes] = time.split(':').map(Number);
    const period = hours >= 12 ? 'PM' : 'AM';
    const displayHours = hours % 12 || 12;
    return `${displayHours}:${minutes.toString().padStart(2, '0')} ${period}`;
}
